(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{439:function(s,t,a){s.exports=a.p+"assets/img/Docker结构.317cc1b4.png"},440:function(s,t,a){s.exports=a.p+"assets/img/虚拟机结构.c1ce10c5.png"},441:function(s,t,a){s.exports=a.p+"assets/img/Dockerfile指令.4e785835.png"},679:function(s,t,a){"use strict";a.r(t);var e=a(18),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"初识-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初识-docker"}},[s._v("#")]),s._v(" 初识 Docker")]),s._v(" "),e("p",[s._v("在大型项目中，组件往往较多，运行环境也较为复杂，部署时会碰到一些问题：")]),s._v(" "),e("ul",[e("li",[s._v("依赖关系复杂，容易出现兼容性问题")]),s._v(" "),e("li",[s._v("开发、测试、生产环境有差异")])]),s._v(" "),e("p",[s._v("Docker 是如何解决依赖关系复杂，容易出现兼容性问题的？")]),s._v(" "),e("ul",[e("li",[s._v("将应用的 Libs(函数库)、Deps(依赖)、配置与应用一起打包，形成可移植镜像")]),s._v(" "),e("li",[s._v("将每个应用放到一个隔离容器去运行，避免互相干扰")])]),s._v(" "),e("p",[s._v("Docker 是如何解决开发、测试、生产环境有差异的问题？")]),s._v(" "),e("ul",[e("li",[s._v("Docker 镜像中包含完整运行环境，包括系统函数库，仅依赖系统的 Linux 内核，因此可以在任意 Linux 操作系统上运行。")])]),s._v(" "),e("p",[s._v("总的来说，Docker 是一个快速交付应用、运行应用的技术：")]),s._v(" "),e("ol",[e("li",[s._v("可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意 Linux 操作系统。")]),s._v(" "),e("li",[s._v("运行时利用沙箱机制形成隔离容器，各个应用互不干扰。")]),s._v(" "),e("li",[s._v("启动、移除都可以通过一行命令完成，方便快捷。")])]),s._v(" "),e("h3",{attrs:{id:"docker-与虚拟机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-与虚拟机"}},[s._v("#")]),s._v(" Docker 与虚拟机")]),s._v(" "),e("p",[s._v("虚拟机是在操作系统中模拟硬件设备，然后运行另一个操作系统，比如在 windows 系统中运行 Ubuntu 系统。")]),s._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:a(439),width:"50%"}}),e("img",{attrs:{src:a(440),width:"40%"}})]),s._v(" "),e("p",[s._v("两者对比：")]),s._v(" "),e("ul",[e("li",[s._v("性能：Docker 接近原生，虚拟机性能较差。")]),s._v(" "),e("li",[s._v("硬盘占用：Docker 一般为 MB，虚拟机一般为 GB。")]),s._v(" "),e("li",[s._v("启动：Docker 一般为秒级，虚拟机一般为分钟级。")])]),s._v(" "),e("h3",{attrs:{id:"镜像、容器、仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像、容器、仓库"}},[s._v("#")]),s._v(" 镜像、容器、仓库")]),s._v(" "),e("p",[s._v("镜像（Image）：Docker 将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。"),e("br"),s._v("\n容器（Container）：镜像中的应用程序运行后形成的进程就是容器，只是 Docker 会给容器做隔离，对外不可见。"),e("br"),s._v("\n仓库(Repository)：集中存放镜像的地方。DockerHub 就是这样一个 Docker 镜像的托管平台，类似的还有阿里云镜像服务，统称为 DockerRegistry。")]),s._v(" "),e("h3",{attrs:{id:"docker-架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-架构"}},[s._v("#")]),s._v(" Docker 架构")]),s._v(" "),e("p",[s._v("Docker 是一个 CS 架构的程序，由两部分组成：")]),s._v(" "),e("ul",[e("li",[s._v("服务端（Server）：Docker 守护进程，负责处理 Docker 指令，管理镜像、容器等。")]),s._v(" "),e("li",[s._v("客户端（Client）：通过命令或 RestAPI 向 Docker 服务端发送指令。可以在本地或远程向服务端发送指令。")])]),s._v(" "),e("h2",{attrs:{id:"docker-基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-基本操作"}},[s._v("#")]),s._v(" Docker 基本操作")]),s._v(" "),e("p",[s._v("Doker 镜像名称一般分两部分组成：[repository]:[tag]，其中，tag 是指版本，在没有指定 tag 时，默认是 latest，代表最新版本的镜像。")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker version          "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 docker 版本")]),s._v("\ndocker images           "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有已下载镜像")]),s._v("\ndocker image "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有已下载镜像")]),s._v("\ndocker search mysql     "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 mysql 相关镜像")]),s._v("\ndocker pull mysql:5.7   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拉取 mysql 镜像")]),s._v("\ndocker push "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("image"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 推送镜像到 Registry")]),s._v("\ndocker build            "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 构建镜像")]),s._v("\ndocker save             "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 保存镜像为一个压缩包")]),s._v("\ndocker load             "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 加载压缩包为镜像")]),s._v("\ndocker image prune      "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清理临时的、没有被使用的镜像文件")]),s._v("\ndocker rmi              "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除镜像")]),s._v("\n\ndocker container "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有容器")]),s._v("\ndocker "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("               "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看正在运行的容器")]),s._v("\ndocker logs             "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看容器运行日志，-f 参数可以持续查看日志")]),s._v("\ndocker "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v("             "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入容器执行命令")]),s._v("\ndocker run              "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将一个镜像启动为容器")]),s._v("\ndocker pause            "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂停容器")]),s._v("\ndocker unpause          "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将暂停的容器启动")]),s._v("\ndocker start            "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动容器")]),s._v("\ndocker stop             "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止容器")]),s._v("\ndocker "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("               "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除指定容器，不能删除运行中的容器，除非添加 -f")]),s._v("\n")])])]),e("h3",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker run --name containerName -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 -d nginx\n")])])]),e("p",[s._v("参数解读：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("--name")]),s._v("：给容器起一个名字")]),s._v(" "),e("li",[e("code",[s._v("-p")]),s._v("：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口")]),s._v(" "),e("li",[e("code",[s._v("-d")]),s._v("：在后台运行容器，一般都要添加")]),s._v(" "),e("li",[e("code",[s._v("nginx")]),s._v("：镜像名称")])]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it mn "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" \n")])])]),e("p",[s._v("参数解读：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("-it")]),s._v("：给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互")]),s._v(" "),e("li",[e("code",[s._v("mn")]),s._v("：要进入的容器的名称")]),s._v(" "),e("li",[e("code",[s._v("bash")]),s._v("：进入容器后执行的命令，bash 是一个 Linux 终端交互命令")])]),s._v(" "),e("blockquote",[e("p",[s._v("exec 命令可以进入容器修改文件，但是在容器内修改文件是不推荐的。")])]),s._v(" "),e("h3",{attrs:{id:"数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据卷"}},[s._v("#")]),s._v(" 数据卷")]),s._v(" "),e("p",[s._v("为什么需要用到数据卷？原来的容器使用方式有什么问题？")]),s._v(" "),e("ol",[e("li",[s._v("不便于修改：当我们要修改容器内的某些数据时，需要进入容器内部修改，很不方便。")]),s._v(" "),e("li",[s._v("数据不可复用：在容器内的修改对外是不可见的。所有修改对新创建的容器是不可复用的。")]),s._v(" "),e("li",[s._v("升级维护困难：数据在容器内，如果要升级容器必然删除旧容器，所有数据都跟着删除了。")])]),s._v(" "),e("p",[s._v("数据卷（volume）是一个虚拟目录，指向宿主机文件系统中的某个目录，它是由 Docker 进行管理的。当我们把数据卷挂载到容器内的某个目录后，我们在数据卷中做的修改都能够实时同步到容器中。")]),s._v(" "),e("p",[s._v("数据卷操作的基本语法如下：")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker volume "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("COMMAND"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),e("p",[e("code",[s._v("docker volume")]),s._v(" 命令是数据卷操作，根据命令后跟随的 "),e("code",[s._v("COMMAND")]),s._v(" 来确定下一步的操作：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("create")]),s._v("：创建一个 volume。")]),s._v(" "),e("li",[e("code",[s._v("inspect")]),s._v("：显示一个或多个 volume 的信息。")]),s._v(" "),e("li",[e("code",[s._v("ls")]),s._v("：列出所有的 volume。")]),s._v(" "),e("li",[e("code",[s._v("prune")]),s._v("：删除未使用的 volume。")]),s._v(" "),e("li",[e("code",[s._v("rm")]),s._v("：删除一个或多个指定的 volume。")])]),s._v(" "),e("p",[s._v("在创建容器时，可以通过 "),e("code",[s._v("-v")]),s._v(" 参数来挂载一个数据卷到某个容器目录")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker run "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  -name mn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  -v html:/root/html "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把 html 数据卷挂载到容器内的 /root/html 这个目录")]),s._v("\n  -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":80 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(" \n  nginx\n")])])]),e("p",[s._v("此外，想要实现跟数据卷一样的功能，也可以直接将宿主机目录直接挂载到容器，其挂载的语法跟语句卷挂载是类似的：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("-v [宿主机目录]:[容器内目录]")])]),s._v(" "),e("li",[e("code",[s._v("-v [宿主机文件]:[容器内文件]")])])]),s._v(" "),e("p",[s._v("数据卷挂载和目录直接挂载的区别如下：")]),s._v(" "),e("ol",[e("li",[s._v("数据卷挂载耦合度低，由 docker 来管理目录，但是目录较深，不好找")]),s._v(" "),e("li",[s._v("目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看")])]),s._v(" "),e("h2",{attrs:{id:"dockerfile-自定义镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-自定义镜像"}},[s._v("#")]),s._v(" Dockerfile 自定义镜像")]),s._v(" "),e("h3",{attrs:{id:"镜像结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像结构"}},[s._v("#")]),s._v(" 镜像结构")]),s._v(" "),e("p",[s._v("要自定义镜像，首先肯定要先了解镜像结构。"),e("br"),s._v("\n前面说过，镜像是将应用程序及其需要的系统函数库、环境配置、依赖打包而成。而它的结构是分层的，每一层称为一个 Layer。")]),s._v(" "),e("ul",[e("li",[s._v("BaseImage：应用依赖的系统函数库、环境、配置、文件等，因为基本都不会变，所以打包成一个基础镜像层。")]),s._v(" "),e("li",[s._v("其他层：在 BaseImage 基础上添加安装包、依赖、配置等，每次操作都形成新的一层。")]),s._v(" "),e("li",[s._v("入口（Entrypoint）：镜像运行入口，一般是程序启动的命令、脚本和参数。")])]),s._v(" "),e("h3",{attrs:{id:"dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[s._v("#")]),s._v(" Dockerfile")]),s._v(" "),e("p",[s._v("Dockerfile 就是一个文本文件，其中包含一个个的指令，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层 Layer。\n")]),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:a(441),width:"100%"}})]),e("p"),s._v(" "),e("p",[s._v("Dockerfile 文件示例：")]),s._v(" "),e("div",{staticClass:"language-dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定基础镜像")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu:16.04")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置环境变量，JDK的安装目录")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" JAVA_DIR=/usr/local")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拷贝jdk和java项目的包")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" ./jdk8.tar.gz "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_DIR")]),s._v("/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" ./docker-demo.jar /tmp/app.jar")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装JDK")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_DIR")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n && tar -xf ./jdk8.tar.gz "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n && mv ./jdk1.8.0_144 ./java8")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置环境变量")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" JAVA_HOME="),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_DIR")]),s._v("/java8")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" PATH="),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PATH")]),s._v(":"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_HOME")]),s._v("/bin")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暴露端口")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 8090")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 入口，java项目的启动命令")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" java -jar /tmp/app.jar")]),s._v("\n")])])]),e("p",[s._v("注意：Dockerfile 的第一行必须是 FROM，从一个基础镜像来构建，基础镜像可以是基本操作系统，如 Ubuntu，也可以是其他人制作好的镜像，如 java:8-alpine。")]),s._v(" "),e("p",[s._v("在编写好 dockerfile 后，可以使用 "),e("code",[s._v("docker build")]),s._v(" 命令来构建镜像，以及使用 "),e("code",[s._v("docker run")]),s._v(" 创建容器并运行。")]),s._v(" "),e("h2",{attrs:{id:"dockercompose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockercompose"}},[s._v("#")]),s._v(" DockerCompose")]),s._v(" "),e("h3",{attrs:{id:"什么是-dockercompose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-dockercompose"}},[s._v("#")]),s._v(" 什么是 DockerCompose？")]),s._v(" "),e("ul",[e("li",[s._v("Docker Compose 可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器。")]),s._v(" "),e("li",[s._v("Docker Compose 本质也是一个文本文件，通过指令定义集群中的每个容器如何运行。")])]),s._v(" "),e("h3",{attrs:{id:"dockercompose-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockercompose-安装"}},[s._v("#")]),s._v(" DockerCompose 安装")]),s._v(" "),e("ol",[e("li",[s._v("要使用 DockerCompose 需要先安装，在 Linux 下可以通过命令安装:")])]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L https://github.com/docker/compose/releases/download/1.29.1/docker-compose-"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -s"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("-"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /usr/local/bin/docker-compose\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("修改文件权限：")])]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改权限")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x /usr/local/bin/docker-compose\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("Base 自动补全命令")])]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 补全命令")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /etc/bash_completion.d/docker-compose\n")])])]),e("h3",{attrs:{id:"dockercompose-文件内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockercompose-文件内容"}},[s._v("#")]),s._v(" DockerCompose 文件内容")]),s._v(" "),e("p",[s._v("DockerCompose 和 Dockerfile 文件的内容是一一对应的，只是语法结构不一样。")]),s._v(" "),e("div",{staticClass:"language-yml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3.2"')]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("services")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("           "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 各种微服务")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("nacos")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nacos/nacos"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("server   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nacos 微服务镜像")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("MODE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" standalone          "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nacos 模式：单机")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8848:8848"')]),s._v("             "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器内外端口映射")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("mysql")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" mysql"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("5.7.25\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("MYSQL_ROOT_PASSWORD")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("volumes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 数据卷挂载")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$PWD/mysql/data:/var/lib/mysql"')]),s._v("    \n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$PWD/mysql/conf:/etc/mysql/conf.d/"')]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("userservice")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("build")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ./user"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("service       "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会在这个目录下找 Dockerfile 构建镜像")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("orderservice")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("build")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ./order"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("service\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("gateway")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("build")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ./gateway\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10010:10010"')]),s._v("\n")])])]),e("h3",{attrs:{id:"利用-dockercompose-部署微服务集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#利用-dockercompose-部署微服务集群"}},[s._v("#")]),s._v(" 利用 DockerCompose 部署微服务集群")]),s._v(" "),e("ol",[e("li",[s._v("编写好 DockerCompose 文件，我们要对哪些微服务做部署要在文件中写好。")]),s._v(" "),e("li",[s._v("修改自己的微服务项目，将数据库、Nacos 地址等都命名为 DockerCompose 中的服务名。")]),s._v(" "),e("li",[s._v("将各个微服务编译好打包成 jar 包，拷贝到它们在微服务集群中对应的子目录中，jar 包名字要与子目录中的 Dockerfile 对应。")]),s._v(" "),e("li",[s._v("将微服务集群文件夹上传至虚拟机，利用 "),e("code",[s._v("docker-compose up -d")]),s._v(" 来部署。")])]),s._v(" "),e("h2",{attrs:{id:"docker-镜像仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像仓库"}},[s._v("#")]),s._v(" Docker 镜像仓库")]),s._v(" "),e("p",[s._v("镜像仓库（Docker Registry）有公共的和私有的两种形式：")]),s._v(" "),e("ul",[e("li",[s._v("公共仓库：例如 Docker 官方的 DockerHub，国内也有一些云服务商提供类似于 Docker Hub 的公开服务，比如网易云镜像服务，DaoCloud 镜像服务，阿里云镜像服务等。")]),s._v(" "),e("li",[s._v("私有仓库：除了使用公开仓库外，用户还可以在本地搭建私有 Docker Registry。企业自己的镜像最好是采用私有 Docker Registry 来实现。")])]),s._v(" "),e("h3",{attrs:{id:"简化版镜像仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简化版镜像仓库"}},[s._v("#")]),s._v(" 简化版镜像仓库")]),s._v(" "),e("p",[s._v("Docker 官方的 Docker Registry 是一个基础版本的 Docker 镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。搭建方式比较简单，命令如下：")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker run -d "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --restart"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("always "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --name registry\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(":5000 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    -v registry-data:/var/lib/registry "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    registry\n")])])]),e("p",[s._v("命令中挂载了一个数据卷 registry-data 到容器内的 /var/lib/registry  目录，这是私有镜像库存放数据的目录。")]),s._v(" "),e("p",[s._v("访问 http://YourIp:5000/v2/_catalog 可以查看当前私有镜像服务中包含的镜像。")]),s._v(" "),e("h3",{attrs:{id:"带有图形化界面版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#带有图形化界面版本"}},[s._v("#")]),s._v(" 带有图形化界面版本")]),s._v(" "),e("p",[s._v("使用 DockerCompose 部署带有图形界面的 DockerRegistry，命令如下：")]),s._v(" "),e("div",{staticClass:"language-yml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3.0'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("services")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("registry")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" registry\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("volumes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" ./registry"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("/var/lib/registry\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ui")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" joxit/docker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("registry"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("ui"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("static\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" 8080"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" REGISTRY_TITLE=传智教育私有仓库\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" REGISTRY_URL=http"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("//registry"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("depends_on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" registry\n")])])]),e("h3",{attrs:{id:"在私有镜像仓库推送或拉取镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在私有镜像仓库推送或拉取镜像"}},[s._v("#")]),s._v(" 在私有镜像仓库推送或拉取镜像")]),s._v(" "),e("p",[s._v("推送镜像到私有镜像服务必须先 tag，步骤如下：")]),s._v(" "),e("ol",[e("li",[s._v("重新命名本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/")])]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker tag nginx:latest "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".150.101:8080/nginx:1.0\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("推送镜像")])]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker push "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".150.101:8080/nginx:1.0\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("拉取镜像")])]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("docker pull "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".150.101:8080/nginx:1.0\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);