(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{651:function(a,v,_){"use strict";_.r(v);var e=_(18),r=Object(e.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("blockquote",[_("p",[a._v("这篇文章以问答的形式用于快速回顾知识点以及用于自测。"),_("br"),a._v("\n因为知识点相当多，即使在看时能够理解记住，但过后也往往只是有印象，大概知道是什么东西，但想回答出来却总是卡壳，看了忘，忘了看。因此，这篇文章用于帮助速记回忆，自测时可以由这些点延伸。")])]),a._v(" "),_("h2",{attrs:{id:"spring-基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-基础"}},[a._v("#")]),a._v(" Spring 基础")]),a._v(" "),_("h4",{attrs:{id:"什么是-spring-框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-框架"}},[a._v("#")]),a._v(" 什么是 Spring 框架？")]),a._v(" "),_("p",[a._v("一款开源的轻量级Java开发框架，核心思想是不重复造轮子，开箱即用，提高开发效率。提供的核心功能主要是 IoC 和 AOP。")]),a._v(" "),_("h4",{attrs:{id:"spring-包含的模块有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-包含的模块有哪些"}},[a._v("#")]),a._v(" Spring 包含的模块有哪些？")]),a._v(" "),_("ul",[_("li",[a._v("Core Container")]),a._v(" "),_("li",[a._v("AOP")]),a._v(" "),_("li",[a._v("Data Access / Integration")]),a._v(" "),_("li",[a._v("Spring Web")]),a._v(" "),_("li",[a._v("Messaging：新加入的模块，主要是为 Spring 框架集成一些基础的报文传送应用。")]),a._v(" "),_("li",[a._v("Spring Test")])]),a._v(" "),_("h4",{attrs:{id:"spring、spring-mvc、spring-boot-之间有什么关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring、spring-mvc、spring-boot-之间有什么关系"}},[a._v("#")]),a._v(" Spring、Spring MVC、Spring Boot 之间有什么关系？")]),a._v(" "),_("ul",[_("li",[a._v("Spring MVC（Model、View、Controller） 是 Spring 中的一个重要模块。")]),a._v(" "),_("li",[a._v("Spring 旨在简化 J2EE（Java 2 Platform Enterprise Edition） 企业应用程序开发。")]),a._v(" "),_("li",[a._v("Spring Boot 旨在简化 Spring 开发（减少配置文件，开箱即用）。")])]),a._v(" "),_("h2",{attrs:{id:"spring-ioc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc"}},[a._v("#")]),a._v(" Spring IoC")]),a._v(" "),_("h4",{attrs:{id:"什么是-ioc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ioc"}},[a._v("#")]),a._v(" 什么是 IoC？")]),a._v(" "),_("p",[a._v("IoC 即控制反转，它是一种设计思想，而不是具体实现。")]),a._v(" "),_("h4",{attrs:{id:"为什么叫控制反转"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么叫控制反转"}},[a._v("#")]),a._v(" 为什么叫控制反转？")]),a._v(" "),_("p",[a._v("它将对象创建（实例化、管理）的权力交给了外部环境（Spring 框架、IoC 容器），在需要的时候进行依赖注入即可。")]),a._v(" "),_("h4",{attrs:{id:"什么是-ioc-容器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ioc-容器"}},[a._v("#")]),a._v(" 什么是 IoC 容器？")]),a._v(" "),_("p",[a._v("IoC 容器是 Spring 用来实现 IoC 的载体，它实际上就是个 Map，Map 中存放的是各种对象。")]),a._v(" "),_("h4",{attrs:{id:"什么是-spring-bean"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-bean"}},[a._v("#")]),a._v(" 什么是 Spring Bean？")]),a._v(" "),_("p",[a._v("被 IoC 容器管理的对象。")]),a._v(" "),_("h4",{attrs:{id:"怎么注册-spring-bean"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#怎么注册-spring-bean"}},[a._v("#")]),a._v(" 怎么注册 Spring Bean？")]),a._v(" "),_("p",[a._v("需要通过配置元数据来定义，可以通过 XML 文件、注解或者 Java 配置类。")]),a._v(" "),_("h4",{attrs:{id:"将一个类声明为-bean-的注解有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#将一个类声明为-bean-的注解有哪些"}},[a._v("#")]),a._v(" 将一个类声明为 Bean 的注解有哪些？")]),a._v(" "),_("p",[a._v("@Component、@Controller、@Service、@Repository")]),a._v(" "),_("h4",{attrs:{id:"component-和-bean-的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#component-和-bean-的区别是什么"}},[a._v("#")]),a._v(" @Component 和 @Bean 的区别是什么？")]),a._v(" "),_("ul",[_("li",[a._v("@Component 作用于类，@Bean 作用于方法")]),a._v(" "),_("li",[a._v("@Component 通常是通过类路径扫描来自动检测和自动装配到 Spring 容器中的，而 @Bean 通常是我们在方法中手动产生实例并将其作为返回值，@Bean 告诉 Spring 这个返回值就是 bean。")]),a._v(" "),_("li",[a._v("@Bean 比 @Component 自定义性更强，很多时候只能通过 @Bean 注解来注册 bean，比如第三方类库。")])]),a._v(" "),_("h4",{attrs:{id:"注入-bean-的注解有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注入-bean-的注解有哪些"}},[a._v("#")]),a._v(" 注入 Bean 的注解有哪些？")]),a._v(" "),_("p",[a._v("@Autowired、@Resource、@Inject(较少使用)")]),a._v(" "),_("h4",{attrs:{id:"autowired-和-resource-的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#autowired-和-resource-的区别是什么"}},[a._v("#")]),a._v(" @Autowired 和 @Resource 的区别是什么？")]),a._v(" "),_("ul",[_("li",[a._v("@Autowired 是 Spring 提供的注解，@Resource 是 JDK 提供的注解。")]),a._v(" "),_("li",[a._v("@Autowired 默认注入方式是 "),_("code",[a._v("byType")]),a._v("，@Resource 默认注入方式是 "),_("code",[a._v("byName")]),a._v("。")]),a._v(" "),_("li",[a._v("当接口存在多个实现类的时候，它们都需要通过名称来正确匹配，@Autowired 通过 @Qualifier 注解指定，@Resource 通过它的 "),_("code",[a._v("name")]),a._v(" 属性指定。")]),a._v(" "),_("li",[a._v("@Autowired 支持在构造函数、方法、字段和参数上使用，而 @Resource 主要用于字段和方法上的注入，不支持构造函数或参数上使用。")])]),a._v(" "),_("h4",{attrs:{id:"bean的作用域有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bean的作用域有哪些"}},[a._v("#")]),a._v(" Bean的作用域有哪些？")]),a._v(" "),_("ul",[_("li",[a._v("singleton")]),a._v(" "),_("li",[a._v("prototype")]),a._v(" "),_("li",[a._v("request（仅 Web 应用可用）：每一次 HTTP 请求都会产生一个新的 bean，仅在请求期间有效。")]),a._v(" "),_("li",[a._v("session（仅 Web 应用可用）：每一次来自新 session 的 HTTP 请求都会产生一个新的 bean，仅在 session 请求期间有效。")]),a._v(" "),_("li",[a._v("application/global-session（仅 Web 应用可用）：每个 Web 应用启动时创建一个 bean，仅在应用期间有效。")]),a._v(" "),_("li",[a._v("websocket（仅 Web 应用可用）：每一次 websocket 会话产生一个新的 bean。")])]),a._v(" "),_("h4",{attrs:{id:"如何配置-bean-的作用域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何配置-bean-的作用域"}},[a._v("#")]),a._v(" 如何配置 bean 的作用域？")]),a._v(" "),_("ul",[_("li",[a._v('xml 方式：scope="singleton"')]),a._v(" "),_("li",[a._v("注解方式：@Scope(Value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)")])]),a._v(" "),_("h4",{attrs:{id:"bean-是线程安全的吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bean-是线程安全的吗"}},[a._v("#")]),a._v(" Bean 是线程安全的吗？")]),a._v(" "),_("p",[a._v("Bean 是否线程安全，取决于作用域和状态。")]),a._v(" "),_("ul",[_("li",[a._v("prototype 每次获取创建一个新的 bean，不存在资源竞争，所以不存在线程安全问题。")]),a._v(" "),_("li",[a._v("singleton 可能会有资源竞争的问题，取决于 bean 是否有状态，有状态则存在线程安全问题。bean 有状态是指包含可变的成员变量。大部分 bean 都是无状态的，比如 Dao、Service 层的 bean。")]),a._v(" "),_("li",[a._v("对于有状态单例 bean 的线程安全问题，有两种解决方案：\n"),_("ul",[_("li",[a._v("在 bean 中尽量避免定义可变的成员变量")]),a._v(" "),_("li",[a._v("利用 ThreadLocal 存储成员变量（推荐）")])])])]),a._v(" "),_("h4",{attrs:{id:"bean-的生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bean-的生命周期"}},[a._v("#")]),a._v(" Bean 的生命周期？")]),a._v(" "),_("p",[a._v("从上往下：")]),a._v(" "),_("ul",[_("li",[a._v("实例化 bean 对象")]),a._v(" "),_("li",[a._v("设置对象属性")]),a._v(" "),_("li",[a._v("检查 Aware 相关接口并设置依赖")]),a._v(" "),_("li",[a._v("BeanPostProcessor 前置处理")]),a._v(" "),_("li",[a._v("检查是否有 InitializingBean 以决定是否调用 afterPropertiesSet 方法")]),a._v(" "),_("li",[a._v("检查是否有自定义的 init-method")]),a._v(" "),_("li",[a._v("BeanPostProcessor 后置处理")]),a._v(" "),_("li",[a._v("注册必要 Destruction 相关回调接口")]),a._v(" "),_("li",[a._v("使用中")]),a._v(" "),_("li",[a._v("销毁时，是否实现了 DisposableBean 接口，是否有自定义的 "),_("code",[a._v("destroy()")]),a._v("方法，若实现执行 "),_("code",[a._v("destroy()")]),a._v(" 方法。")])]),a._v(" "),_("h2",{attrs:{id:"spring-aop"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop"}},[a._v("#")]),a._v(" Spring AOP")]),a._v(" "),_("h4",{attrs:{id:"spring-aop-是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-是什么"}},[a._v("#")]),a._v(" Spring AOP 是什么？")]),a._v(" "),_("p",[a._v("Aspect-Oriented Programmer，面向切面编程，用于进行方法功能增强或封装通用的代码逻辑。"),_("br"),a._v("\nSpring AOP 底层实现是基于动态代理的，若要代理的对象实现了接口则使用 JDK 动态代理，若未实现接口则使用 CGLib 动态代理。")]),a._v(" "),_("h4",{attrs:{id:"aop-切面编程涉及到的专业术语有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aop-切面编程涉及到的专业术语有哪些"}},[a._v("#")]),a._v(" AOP 切面编程涉及到的专业术语有哪些？")]),a._v(" "),_("ul",[_("li",[a._v("目标（Target）：要代理的对象。")]),a._v(" "),_("li",[a._v("代理(Proxy)：代理对象，即增强后的对象。")]),a._v(" "),_("li",[a._v("连接点(JoinPoint)：目标对象所属的类中，定义的所有方法都是连接点。")]),a._v(" "),_("li",[a._v("切入点(PointCut)：要执行增强的方法。")]),a._v(" "),_("li",[a._v("通知(Advice)：增强的逻辑，也就是拦截到目标对象的连接点之后要做的事。")]),a._v(" "),_("li",[a._v("切面(Aspect)：切点 + 通知。")]),a._v(" "),_("li",[a._v("织入(Weaving)：将通知应用到目标对象，进而产生代理对象的过程动作。")])]),a._v(" "),_("h4",{attrs:{id:"spring-aop-和-aspectj-aop-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-和-aspectj-aop-有什么区别"}},[a._v("#")]),a._v(" Spring AOP 和 AspectJ AOP 有什么区别？")]),a._v(" "),_("ul",[_("li",[a._v("Spring AOP 属于运行时增强，AspectJ AOP 是编译时增强。")]),a._v(" "),_("li",[a._v("Spring AOP 基于代理，而 AspectJ AOP 基于字节码操作。")]),a._v(" "),_("li",[a._v("Spring AOP 已经集成了 AspectJ。")]),a._v(" "),_("li",[a._v("AspectJ AOP 比 Spring AOP 功能更强大，性能更快，而 Spring AOP 相对来说更简单。")])]),a._v(" "),_("h4",{attrs:{id:"aspectj-定义的通知类型有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aspectj-定义的通知类型有哪些"}},[a._v("#")]),a._v(" AspectJ 定义的通知类型有哪些？")]),a._v(" "),_("ul",[_("li",[a._v("Before（前置通知）")]),a._v(" "),_("li",[a._v("After（后置通知）")]),a._v(" "),_("li",[a._v("Around（环绕通知）")]),a._v(" "),_("li",[a._v("AfterReturning（返回通知）")]),a._v(" "),_("li",[a._v("AfterThrowing（异常通知）")])]),a._v(" "),_("h4",{attrs:{id:"多个切面的执行顺序如何控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多个切面的执行顺序如何控制"}},[a._v("#")]),a._v(" 多个切面的执行顺序如何控制？")]),a._v(" "),_("ul",[_("li",[a._v("通常使用 @Order 注解直接定义切面顺序")]),a._v(" "),_("li",[a._v("也可以实现 Ordered 接口重写 getOrder 方法。")])]),a._v(" "),_("h2",{attrs:{id:"spring-mvc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[a._v("#")]),a._v(" Spring MVC")]),a._v(" "),_("h4",{attrs:{id:"spring-mvc-是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-是什么"}},[a._v("#")]),a._v(" Spring MVC 是什么？")]),a._v(" "),_("p",[a._v("MVC 是 Model、View、Controller 的简写，它更像是一种设计模式，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。"),_("br"),a._v("\nSpring MVC 是一款很优秀的 MVC 框架，可以简化 Web 层的开发，并且天生与 Spring 框架集成。")]),a._v(" "),_("h4",{attrs:{id:"spring-mvc-的核心组件有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-的核心组件有哪些"}},[a._v("#")]),a._v(" Spring MVC 的核心组件有哪些？")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("DispatcherServlet")]),a._v("：核心的中央处理器，负责接收请求、分发，并给予客户端响应。")]),a._v(" "),_("li",[_("code",[a._v("HandlerMapping")]),a._v("：处理器映射器，根据 URL 去匹配查找能处理的 Handler，并将请求涉及到的拦截器和 Handler 一起封装。")]),a._v(" "),_("li",[_("code",[a._v("HandlerAdapter")]),a._v("：处理器适配器，根据 HandlerMapping 找到的 Handler，适配执行对应的 Handler。")]),a._v(" "),_("li",[_("code",[a._v("Handler")]),a._v("：请求处理器，处理实际请求。")]),a._v(" "),_("li",[_("code",[a._v("ViewResolver")]),a._v("：视图解析器，根据 Handler 返回的逻辑视图/视图，解析并渲染真正的视图，并传递给 DispatcherServlet 响应客户端。")])]),a._v(" "),_("h4",{attrs:{id:"spring-mvc-的工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-的工作原理"}},[a._v("#")]),a._v(" Spring MVC 的工作原理？")]),a._v(" "),_("ol",[_("li",[a._v("客户端发送请求，"),_("code",[a._v("DispatcherServlet")]),a._v(" 拦截请求。")]),a._v(" "),_("li",[_("code",[a._v("DispatcherServlet")]),a._v(" 根据请求信息调用 "),_("code",[a._v("HandlerMapping")]),a._v("。"),_("code",[a._v("HandlerMapping")]),a._v(" 根据 URL 去匹配查找能处理的 "),_("code",[a._v("Handler")]),a._v(" （也就是平常说的 "),_("code",[a._v("Controller")]),a._v(" 控制器），并将请求涉及到的拦截器和 "),_("code",[a._v("Handler")]),a._v(" 一起封装。")]),a._v(" "),_("li",[_("code",[a._v("DispatcherServlet")]),a._v(" 调用 "),_("code",[a._v("HandlerAdapter")]),a._v(" 执行 "),_("code",[a._v("Handler")]),a._v("。")]),a._v(" "),_("li",[_("code",[a._v("Handler")]),a._v(" 完成用户请求的处理，会返回一个 "),_("code",[a._v("ModelAndView")]),a._v(" 对象给 "),_("code",[a._v("DispatcherServlet")]),a._v("。"),_("code",[a._v("ModelAndView")]),a._v(" 包含了数据模型和相应的视图信息。"),_("code",[a._v("Model")]),a._v(" 是返回的数据对象，"),_("code",[a._v("View")]),a._v(" 是视图。")]),a._v(" "),_("li",[_("code",[a._v("ViewResolver")]),a._v(" 会根据逻辑视图解析渲染真正的视图。")]),a._v(" "),_("li",[_("code",[a._v("DispatcherServlet")]),a._v(" 把返回的 "),_("code",[a._v("Model")]),a._v(" 传给 "),_("code",[a._v("View")]),a._v("。")]),a._v(" "),_("li",[a._v("把 "),_("code",[a._v("View")]),a._v(" 返回给客户端。")])]),a._v(" "),_("h4",{attrs:{id:"统一异常处理怎么做"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#统一异常处理怎么做"}},[a._v("#")]),a._v(" 统一异常处理怎么做？")]),a._v(" "),_("p",[a._v("使用 @ControllerAdvice + @ExceptionHandler 这两个注解")]),a._v(" "),_("h2",{attrs:{id:"spring-中的设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-中的设计模式"}},[a._v("#")]),a._v(" Spring 中的设计模式")]),a._v(" "),_("h4",{attrs:{id:"jdk-中用到了哪些设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk-中用到了哪些设计模式"}},[a._v("#")]),a._v(" JDK 中用到了哪些设计模式？")]),a._v(" "),_("ul",[_("li",[a._v("单例模式："),_("code",[a._v("java.lang.Runtime")]),a._v(" 类使用了单例模式来确保在一个 Java 虚拟机中只有一个运行时实例。")]),a._v(" "),_("li",[a._v("工厂模式："),_("code",[a._v("java.util.Calendar")]),a._v(" 类使用了工厂方法来创建日历实例。")]),a._v(" "),_("li",[a._v("观察者模式：Java 的事件处理机制（如 AWT 和 Swing 中的事件监听器）使用了观察者模式，其中事件源通知注册的观察者对象有关事件的发生。")]),a._v(" "),_("li",[a._v("策略模式："),_("code",[a._v("java.util.Comparator")]),a._v(" 接口用于定义比较策略，允许对象根据不同的策略进行比较。")]),a._v(" "),_("li",[a._v("装饰器模式：输入输出流类层次结构中的装饰器类（如 "),_("code",[a._v("java.io.BufferedReader")]),a._v(" 和 "),_("code",[a._v("java.io.BufferedWriter")]),a._v("）使用了装饰器模式来增强流的功能。")]),a._v(" "),_("li",[a._v("适配器模式："),_("code",[a._v("java.util.Arrays")]),a._v(" 类中的 "),_("code",[a._v("asList()")]),a._v(" 方法返回的 "),_("code",[a._v("List")]),a._v(" 适配器将数组转换为 "),_("code",[a._v("List")]),a._v(" 对象。")]),a._v(" "),_("li",[a._v("迭代器模式：Java 集合框架中的集合类（如 "),_("code",[a._v("ArrayList、HashSet")]),a._v("）使用了迭代器模式来遍历元素。")]),a._v(" "),_("li",[a._v("模板方法模式："),_("code",[a._v("java.io.InputStream")]),a._v(" 和 "),_("code",[a._v("java.io.OutputStream")]),a._v(" 类中的读取和写入方法使用了模板方法模式，其中核心算法由超类定义，而具体操作由子类实现。")]),a._v(" "),_("li",[a._v("命令模式："),_("code",[a._v("java.util.concurrent")]),a._v(" 包中的 "),_("code",[a._v("Executor")]),a._v(" 接口使用了命令模式，将任务封装为命令以异步执行。")])]),a._v(" "),_("h4",{attrs:{id:"spring-中用到了哪些设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-中用到了哪些设计模式"}},[a._v("#")]),a._v(" Spring 中用到了哪些设计模式？")]),a._v(" "),_("ul",[_("li",[a._v("依赖注入（Dependency Inject）：它是实现控制反转的一种设计模式，就是将实例变量传入到一个对象中去。")]),a._v(" "),_("li",[a._v("工厂设计模式：Spring 使用工厂模式可以通过 "),_("code",[a._v("BeanFactory")]),a._v(" 或 "),_("code",[a._v("ApplicationContext")]),a._v(" 创建 bean 对象。")]),a._v(" "),_("li",[a._v("单例设计模式：Spring 通过 "),_("code",[a._v("ConcurrentHashMap")]),a._v(" 实现单例注册表的特殊方式实现单例模式。")]),a._v(" "),_("li",[a._v("代理模式：Spring AOP 就是基于动态代理的，如果要代理的对象实现了某个接口则使用 JDK 动态代理，如果没有实现接口则使用 CGlib 动态代理。")]),a._v(" "),_("li",[a._v("模板方法模式：一种行为设计模式，它定义一个操作中的算法的骨架，而将一些步骤延迟到子类中实现。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤的实现方式。Spring 中 "),_("code",[a._v("JdbcTemplate、HibernateTemplate")]),a._v(" 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。")]),a._v(" "),_("li",[a._v("观察者模式：一种对象行为型模式，表示一种对象与对象之间具有依赖关系，当一个对象发生改变的时候，依赖这个对象的所有对象也会做出反应。Spring 事件驱动模型就是观察者模式很经典的一个应用。")]),a._v(" "),_("li",[a._v("适配器模式：Adapter Pattern 将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作。Spring AOP 的 Advice 用到了适配器模式。Spring MVC 中 DispatcherServlet 解析到对应的 Handler 后，由 HandlerAdapter 适配器处理。")]),a._v(" "),_("li",[a._v("装饰者模式：装饰者模式可以动态地给对象添加一些额外的属性或行为。Spring 中用到的装饰器模式在类名上含有 "),_("code",[a._v("Wrapper")]),a._v(" 或者 "),_("code",[a._v("Decorator")]),a._v("。")])]),a._v(" "),_("h4",{attrs:{id:"使用单例模式的好处"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用单例模式的好处"}},[a._v("#")]),a._v(" 使用单例模式的好处？")]),a._v(" "),_("ul",[_("li",[a._v("对于频繁使用的对象，可以省略创建对象所花费的时间，特别是对重量级对象而言。")]),a._v(" "),_("li",[a._v("由于 new 操作次数减少，对系统内存的使用频率也会降低，这将减轻 GC 压力，缩短 GC 停顿时间。")])]),a._v(" "),_("h4",{attrs:{id:"spring-工厂模式中-beanfactory-和-applicationcontext-创建对象有什么不同"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-工厂模式中-beanfactory-和-applicationcontext-创建对象有什么不同"}},[a._v("#")]),a._v(" Spring 工厂模式中 "),_("code",[a._v("BeanFactory")]),a._v(" 和 "),_("code",[a._v("ApplicationContext")]),a._v(" 创建对象有什么不同？")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("BeanFactory")]),a._v("：延迟注入（使用到某个 bean 时才会注入），相比于 "),_("code",[a._v("ApplicationContext")]),a._v(" 来说占用更少的内存，程序启动速度更快。")]),a._v(" "),_("li",[_("code",[a._v("ApplicationContext")]),a._v("：程序启动时一次性创建所有的 bean。"),_("code",[a._v("ApplicationContext")]),a._v(" 扩展了 "),_("code",[a._v("BeanFactory")]),a._v("，除了有 "),_("code",[a._v("BeanFactory")]),a._v(" 的功能还有额外更多功能，一般来说使用这个更多。它的三个实现类如下：\n"),_("ul",[_("li",[_("code",[a._v("ClassPathXmlApplication")]),a._v("：它会在类路径下查找指定的 XML 配置文件，并根据配置文件中定义的 Bean 来初始化应用程序上下文。")]),a._v(" "),_("li",[_("code",[a._v("FileSystemXmlApplication")]),a._v("：从本地文件系统中的 XML 文件载入上下文定义信息。")]),a._v(" "),_("li",[_("code",[a._v("XmlWebApplicationContext")]),a._v("：从 Web 系统中的 XML 文件载入上下文定义信息。")])])])]),a._v(" "),_("h4",{attrs:{id:"为什么要在-spring-mvc-中使用适配器模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要在-spring-mvc-中使用适配器模式"}},[a._v("#")]),a._v(" 为什么要在 Spring MVC 中使用适配器模式？")]),a._v(" "),_("p",[a._v("Spring MVC 中的 Controller 种类众多，不同类型的 Controller 通过不同的方法来对请求进行处理。如果不利用适配器模式而让 DispatcherServlet 直接获取对应类型的 Controller 的话，每加一个Controller 就需要加一行判断，这使得程序难以维护，且违反了设计模式中的开闭原则。")]),a._v(" "),_("h2",{attrs:{id:"spring-事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-事务"}},[a._v("#")]),a._v(" Spring 事务")]),a._v(" "),_("p",[_("strong",[a._v("只有保证了事务的原子性、隔离性、持久性，一致性才能得到保障。A、I、D 是手段，D 是目的。")])]),a._v(" "),_("h4",{attrs:{id:"spring-中由哪两种支持事务管理的方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-中由哪两种支持事务管理的方式"}},[a._v("#")]),a._v(" Spring 中由哪两种支持事务管理的方式？")]),a._v(" "),_("ul",[_("li",[a._v("编程式事务管理：通过 "),_("code",[a._v("TransactionTemplate")]),a._v(" 或者 "),_("code",[a._v("TransactionManager")]),a._v(" 手动管理事务，实际应用中很少使用。")]),a._v(" "),_("li",[a._v("声明式事务管理：推荐使用（代码侵入性最小），实际是通过 AOP 实现（基于 "),_("code",[a._v("@Transactional")]),a._v(" 的全注解方式使用最多）")])]),a._v(" "),_("h4",{attrs:{id:"spring-中事务相关的三个重要接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-中事务相关的三个重要接口"}},[a._v("#")]),a._v(" Spring 中事务相关的三个重要接口？")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("PlatformTransactionManager")]),a._v("：（平台）事务管理器，事务上层的管理者，Spring 事务策略的核心。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition")]),a._v("：对于事务的一些定义信息，如事务隔离级别、传播行为、超时、只读、回滚规则。")]),a._v(" "),_("li",[_("code",[a._v("TransactionStatus")]),a._v("：事务运行状态，提供了一些接口获取事务相应的状态，比如是否新事务、是否可以回滚等。")])]),a._v(" "),_("h4",{attrs:{id:"为什么要定义或者说抽象-platformtransactionmanager-这个接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要定义或者说抽象-platformtransactionmanager-这个接口"}},[a._v("#")]),a._v(" 为什么要定义或者说抽象 "),_("code",[a._v("PlatformTransactionManager")]),a._v(" 这个接口？")]),a._v(" "),_("p",[a._v("Spring 并不直接管理事务，而是通过 "),_("code",[a._v("PlatformTransactionManager")]),a._v(" 接口抽象出了事务管理行为，然后由不同的平台去实现它，这样可以保证提供给外部的行为不变，方便扩展，其实就是一种 SPI 机制。")]),a._v(" "),_("h4",{attrs:{id:"什么是事务属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是事务属性"}},[a._v("#")]),a._v(" 什么是事务属性？")]),a._v(" "),_("p",[a._v("事务属性即事务的一些基本配置，描述了事务策略如何应用到方法上，包含了 5 个方面：")]),a._v(" "),_("ul",[_("li",[a._v("隔离级别")]),a._v(" "),_("li",[a._v("传播行为")]),a._v(" "),_("li",[a._v("回滚规则")]),a._v(" "),_("li",[a._v("是否只读")]),a._v(" "),_("li",[a._v("事务超时")])]),a._v(" "),_("h4",{attrs:{id:"什么是事务传播行为"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是事务传播行为"}},[a._v("#")]),a._v(" 什么是事务传播行为？")]),a._v(" "),_("p",[a._v("事务传播行为是为了解决业务层方法之间互相调用的事务问题。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("TransactionDefinition.PROPAGATION_REQUIRED")]),a._v("：默认的事务传播行为，也是使用最多的。如果当前存在事务，则加入该事务，只要一个方法回滚，整个事务均回滚；如果当前没有事务，则创建一个新的事务。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition.PROPAGATION_SUPPORTS")]),a._v("：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition.PROPAGATION_MANDATORY")]),a._v("：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition.PROPAGATION_REQUIRES_NEW")]),a._v("：不管外部方法是否开启事务，内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。但是如果内部方法抛出未被捕获异常，则外部事务管理机制可以检测到，有可能回滚。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition.PROPAGATION_NOT_SUPPORTED")]),a._v("：以非事务方式运行，如果当前存在事务，则把当前事务挂起。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition.PROPAGATION_NEVER")]),a._v("：以非事务方式运行，如果当前存在事务，则抛出异常。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition.PROPAGATION_NESTED")]),a._v("：如果外部方法开启事务的情况下，在内部开启一个新的事务，作为嵌套事务存在。如果外部方法无事务，则单独开启一个事务，跟 "),_("code",[a._v("PROPAGATION_REQUIRED")]),a._v(" 类似。")])]),a._v(" "),_("h4",{attrs:{id:"事务有哪些隔离级别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务有哪些隔离级别"}},[a._v("#")]),a._v(" 事务有哪些隔离级别？")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("TransactionDefinition.ISOLATION_DEFAULT")]),a._v("：使用后端数据库默认的隔离级别。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition.ISOLATION_READ_UNCOMMITTED")]),a._v("：读未提交，最低的隔离级别，可能会导致脏读、幻读、不可重复读。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition.ISOLATION_READ_COMMITTED")]),a._v("：读提交，可以阻止脏读，但仍有可能发生幻读和不可重复读。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition.ISOLATION_REPEATABLE_READ")]),a._v("：可阻止脏读和不可重复读，但仍有可能发生幻读。")]),a._v(" "),_("li",[_("code",[a._v("TransactionDefinition.ISOLATION_SERIALIZABLE")]),a._v("：事务一个个执行，则事务之间不可能产生干扰。该级别可以防止脏读、幻读、不可重复读，但严重影响程序性能。")])]),a._v(" "),_("h4",{attrs:{id:"事务的只读属性有什么作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务的只读属性有什么作用"}},[a._v("#")]),a._v(" 事务的只读属性有什么作用？")]),a._v(" "),_("ul",[_("li",[a._v("如果一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持 SQL 执行期间的读一致性；")]),a._v(" "),_("li",[a._v("如果一次执行多条查询语句，例如统计查询，报表查询，在这种场景下要保证整体的读一致性，应该开启事务。否则，在前后查询期间若被其他用户改变，则该次整体的统计查询将会出现数据不一致的状态。")])]),a._v(" "),_("h4",{attrs:{id:"什么是事务回滚规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是事务回滚规则"}},[a._v("#")]),a._v(" 什么是事务回滚规则？")]),a._v(" "),_("p",[a._v("事务回滚规则定义了哪些异常会导致事务回滚而哪些不会。")]),a._v(" "),_("ul",[_("li",[a._v("默认情况下，事务只有遇到运行时异常（"),_("code",[a._v("RuntimeException")]),a._v(" 的子类）时才会回滚，"),_("code",[a._v("Error")]),a._v(" 也会导致事务回滚，但是，在遇到受检查异常（Checked）时不会回滚。")]),a._v(" "),_("li",[a._v("如果想要回滚特定的异常类型，可以通过配置："),_("code",[a._v("@Transactional(rollback = MyException.class)")]),a._v("。")])]),a._v(" "),_("h4",{attrs:{id:"transactional-注解原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#transactional-注解原理"}},[a._v("#")]),a._v(" "),_("code",[a._v("@Transactional")]),a._v(" 注解原理？")]),a._v(" "),_("p",[_("code",[a._v("@Transactional")]),a._v(" 的工作机制是基于 AOP 实现的，AOP 又是使用动态代理实现的。如果目标对象实现了接口，默认情况下使用 JDK 动态代理；如果没有实现接口，则会使用 CGLib 动态代理。")]),a._v(" "),_("p",[a._v("如果一个类或者一个类中的 public 方法上被标注了 @Transactional 注解的话，Spring 容器会在启动的时候为其创建一个代理类，在调用被 "),_("code",[a._v("@Transactional")]),a._v(" 注解的 public 方法时，实际调用的是 "),_("code",[a._v("TransactionInterceptor")]),a._v(" 类中的 "),_("code",[a._v("invoke()")]),a._v(" 方法。这个方法的作用就是在调用目标方法之前开启事务，方法执行过程中如果遇到异常的时候回滚事务，方法调用完成之后提交事务。")]),a._v(" "),_("h4",{attrs:{id:"spring-aop-自调用问题-transactional-的自调用问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-自调用问题-transactional-的自调用问题"}},[a._v("#")]),a._v(" Spring AOP 自调用问题？（@Transactional 的自调用问题？）")]),a._v(" "),_("p",[a._v("当一个方法被标记了 "),_("code",[a._v("@Transactional")]),a._v(" 注解的时候，Spring 事务管理器只会在被其他类方法调用的时候生效，而在同类的其他内部方法调用时无法生效。这是由 Spring AOP 工作原理决定，Spring AOP 在其他类的方法调用其代理对象时进行拦截，而同一个类的方法调用时则无法拦截到这个内部调用，因此事务失效。解决方法就是避免在同一类中进行自调用或者使用 AspectJ 取代 Spring AOP 代理。")]),a._v(" "),_("h2",{attrs:{id:"spring-data-jpa"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-jpa"}},[a._v("#")]),a._v(" Spring Data JPA")]),a._v(" "),_("h4",{attrs:{id:"如何使用-jpa-在数据库中非持久化一个字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-jpa-在数据库中非持久化一个字段"}},[a._v("#")]),a._v(" 如何使用 JPA 在数据库中非持久化一个字段？")]),a._v(" "),_("ul",[_("li",[a._v("static 修饰")]),a._v(" "),_("li",[a._v("final 修饰")]),a._v(" "),_("li",[a._v("transient 修饰")]),a._v(" "),_("li",[a._v("@Transient 注解")])]),a._v(" "),_("h4",{attrs:{id:"jpa-审计功能是做什么的-有什么作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jpa-审计功能是做什么的-有什么作用"}},[a._v("#")]),a._v(" JPA 审计功能是做什么的？有什么作用？")]),a._v(" "),_("p",[a._v("审计功能主要是帮助我们记录数据库操作的具体行为比如某条记录是谁创建的、什么时候创建的、最后修改人是谁、最后修改时间是什么时候。")]),a._v(" "),_("ul",[_("li",[a._v("@CreatedDate")]),a._v(" "),_("li",[a._v("@CreatedBy")]),a._v(" "),_("li",[a._v("@LastModifiedDate")]),a._v(" "),_("li",[a._v("@LastModifiedBy")])]),a._v(" "),_("h4",{attrs:{id:"实体之间的关联关系注解有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实体之间的关联关系注解有哪些"}},[a._v("#")]),a._v(" 实体之间的关联关系注解有哪些？")]),a._v(" "),_("ul",[_("li",[a._v("@OneToOne")]),a._v(" "),_("li",[a._v("@ManyToMany")]),a._v(" "),_("li",[a._v("@OneToMany")]),a._v(" "),_("li",[a._v("@ManyToOne")])])])}),[],!1,null,null,null);v.default=r.exports}}]);